# File: .github/workflows/linux-package.yml
name: Build Linux package

on:
  workflow_dispatch:          # run manually in the Actions tab
  push:                       # or automatically for every tag “v…”
    tags: ['v*']

jobs:
  linux:
    runs-on: ubuntu-latest

    steps:
    # 1) Checkout sources
    - uses: actions/checkout@v4

    # 2) Install JDK 17 (contains jpackage + jlink)
    - name: Set up Temurin 17
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: '17'
        cache: maven            # flip to “gradle” if you swap build tools

    # 3) Build a fat-JAR (includes every dependency)
    #    ────────────────────────────────────────────
    # If you already have maven-shade-plugin or similar configured,
    # the JAR will land in target/ as usual.  If not, add the snippet
    # shown just after this workflow.
    - name: Build runnable JAR
      run: mvn -B clean package -DskipTests

    # 4) Download JavaFX 17 SDK (same version you use locally)
    - name: Download JavaFX 17 SDK
      env:
        JFX_VERSION: 17.0.15
      run: |
        curl -L -o javafx.zip \
             https://download2.gluonhq.com/openjfx/${JFX_VERSION}/openjfx-${JFX_VERSION}_linux-x64_bin-sdk.zip
        unzip -q javafx.zip
        echo "JAVAFX_SDK=$PWD/javafx-sdk-${JFX_VERSION}" >>"$GITHUB_ENV"

    # 5) Build the self-contained app-image with jpackage
    #    ────────────────────────────────────────────────
    - name: Create app-image with jpackage
      run: |
        # locate the freshly built (fat) JAR
        JAR_PATH=$(find target -maxdepth 1 -type f -name '*.jar' ! -name '*sources.jar' | head -n1)
        [ -n "$JAR_PATH" ] || { echo "::error ::No JAR found in target/"; exit 1; }
        JAR_FILE=$(basename "$JAR_PATH")

        # stage inputs for jpackage
        mkdir -p dist/input
        cp "$JAR_PATH"              dist/input/
        cp "$JAVAFX_SDK"/lib/*.jar  dist/input/

        # create the image (dir “dist/PasswordManager”)
        jpackage \
          --dest dist \
          --type app-image \
          --name PasswordManager \
          --input dist/input \
          --main-jar "$JAR_FILE" \
          --add-modules javafx.controls,javafx.fxml

        # turn the directory into one downloadable archive
        tar -C dist -czf dist/PasswordManager-linux-x64.tgz PasswordManager

    # 6) Upload t
